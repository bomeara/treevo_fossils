
R version 3.2.3 (2015-12-10) -- "Wooden Christmas-Tree"
Copyright (C) 2015 The R Foundation for Statistical Computing
Platform: x86_64-apple-darwin13.4.0 (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> source("/Users/bomeara/Documents/MyDocuments/GitClones/treevo_fossils/data/OrganEtAl/ProcessOrganData.R")
Loading required package: ape
Loading required package: maps
Warning messages:
1: package ‘ape’ was built under R version 3.2.5 
2: package ‘phytools’ was built under R version 3.2.5 
3: package ‘maps’ was built under R version 3.2.5 
> 
> changingRateIntrinsic <-function(params, states, timefrompresent) {
+   #params[1] is sd at present,
+   #params[2] is multiplier for parabolic change
+   #overall model is sd_now = params[1] * (1 + params[2]*(timefrompresent)^2)
+   newdisplacement <- rnorm(n=length(states), mean=0, sd=params[1] * (1 + params[2]*(timefrompresent^2)))
+   return(newdisplacement)
+ }
> 
> 
> #assume generation time of 20 years. Tree is in MY time units.
> TreeYears=1e6
> timeStep<-20/TreeYears
> 
> continuous.rate.guess <- geiger::fitContinuous(phy, trait)$opt$sigsq #units are variance / MY
> sd.per.gen.guess <- sd(rnorm(1e5,0,sqrt(continuous.rate.guess*timeStep)))
> 
> max.time.squared <- max(phytools::nodeHeights(phy))^2
> 
> #Assume rate at beginning is not too much greater / less than rate at end: say two standard dev include 10fold diff
> 
> sd.param2 <- (c(10,-10)/2)/max.time.squared
> 
> intrinsicFn=changingRateIntrinsic
> extrinsicFn=nullExtrinsic
> startingPriorsFns=c("uniform")
> startingPriorsValues=matrix(range(trait),nrow=2,byrow=FALSE) #assume that the min value is the root state
> intrinsicPriorsFns=c("exponential","normal") #do fixed for param2 b/c dont have a lot of data to use
> intrinsicPriorsValues=matrix(c(
+   rep(1/sd.per.gen.guess , 2),
+   sd.param2), nrow=2, byrow=FALSE)
> extrinsicPriorsFns=c("fixed")
> extrinsicPriorsValues=matrix(c(0, 0), nrow=2, byrow=FALSE)
> 
> abcTolerance<-0.01
> 
> results <- doRun_prc(
+   phy = phy,
+   traits = trait,
+   intrinsicFn=intrinsicFn,
+   extrinsicFn=extrinsicFn,
+   startingPriorsFns=startingPriorsFns,
+   startingPriorsValues=startingPriorsValues,
+   intrinsicPriorsFns=intrinsicPriorsFns,
+   intrinsicPriorsValues=intrinsicPriorsValues,
+   extrinsicPriorsFns=extrinsicPriorsFns,
+   extrinsicPriorsValues=extrinsicPriorsValues,
+   TreeYears=TreeYears,
+   standardDevFactor=0.2,
+   plot=FALSE,
+   StartSims=100,
+   epsilonProportion=0.1,
+   epsilonMultiplier=0.7,
+   nStepsPRC=5,
+   numParticles=2000,
+   jobName='OrganEtAl',
+   stopRule=FALSE,
+   multicore=TRUE,
+   coreLimit=3
+ )
Setting number of starting points for Geiger optimization to
 10 for Brownian motion
 45 for lambda
 38 for delta
 NA for OU
 10 for white noise
Number of initial simulations set to 100 
Doing simulations:Using 3 core(s) for simulations 

Doing simulations: ...