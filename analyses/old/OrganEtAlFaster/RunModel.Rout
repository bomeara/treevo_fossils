
R version 3.2.3 (2015-12-10) -- "Wooden Christmas-Tree"
Copyright (C) 2015 The R Foundation for Statistical Computing
Platform: x86_64-apple-darwin13.4.0 (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> library(TreEvo)
Loading required package: ape
Warning message:
package ‘ape’ was built under R version 3.2.5 
> 
> options(warn=1)
> #options(error = utils::recover)
> source("/Users/bomeara/Documents/MyDocuments/GitClones/treevo_fossils/data/OrganEtAl/ProcessOrganData.R")
Warning: package ‘phytools’ was built under R version 3.2.5
Loading required package: maps
Warning: package ‘maps’ was built under R version 3.2.5
> 
> 
> #assume generation time of 20 years. Tree is in MY time units.
> TreeYears=1e6
> generation.time=100000
> #timeStep<-1000/TreeYears
> timeStep<-generation.time/TreeYears
> continuous.rate.guess <- geiger::fitContinuous(phy, trait)$opt$sigsq #units are variance / MY
> sd.per.gen.guess <- sd(rnorm(1e5,0,sqrt(continuous.rate.guess*timeStep)))
> 
> 
> 
> intrinsicFn=boundaryMinIntrinsic
> extrinsicFn=nullExtrinsic
> startingPriorsFns=c("uniform")
> startingPriorsValues=matrix(range(trait),nrow=2,byrow=FALSE) #assume that the min value is the root state
> intrinsicPriorsFns=c("exponential","uniform") 
> intrinsicPriorsValues=matrix(c(
+   rep(1/sd.per.gen.guess , 2),
+   c(0, min(trait))), nrow=2, byrow=FALSE)
> extrinsicPriorsFns=c("fixed")
> extrinsicPriorsValues=matrix(c(0, 0), nrow=2, byrow=FALSE)
> 
> abcTolerance<-0.01
> 
> 
> #dealing with zero length branches
> phy$edge.length[which(phy$edge.length<0.01)] <- 0.01 
> 
> #for debugging
> if(FALSE) {
+ 		traits <- trait
+ 				
+ 		timeStep<-generation.time/TreeYears
+ 		
+ 		#splits<-getSimulationSplits(phy) #initialize this info
+ 		taxon.df <- getTaxonDFWithPossibleExtinction(phy)
+ 		
+ 		#figure out number of free params
+ 		numberParametersTotal<-dim(startingPriorsValues)[2] +  dim(intrinsicPriorsValues)[2] + dim(extrinsicPriorsValues)[2]
+ 		numberParametersFree<-numberParametersTotal
+ 		numberParametersStarting<-0
+ 		numberParametersIntrinsic<-0
+ 		numberParametersExtrinsic<-0
+ 		freevariables<-matrix(data=NA, nrow=2, ncol=0)
+ 		titlevector<-c()
+ 		freevector<-c()
+ 		
+ 		#create PriorMatrix
+ 		namesForPriorMatrix<-c()
+ 		PriorMatrix<-matrix(c(startingPriorsFns, intrinsicPriorsFns, extrinsicPriorsFns), nrow=1, ncol=numberParametersTotal)
+ 		for (a in 1:dim(startingPriorsValues)[2]) {
+ 			namesForPriorMatrix<-c(paste("StartingStates", a, sep=""))
+ 		}
+ 		for (b in 1:dim(intrinsicPriorsValues)[2]) {
+ 			namesForPriorMatrix<-append(namesForPriorMatrix, paste("IntrinsicValue", b, sep=""))
+ 		}
+ 		#print(extrinsicPriorsValues)
+ 		for (c in 1:dim(extrinsicPriorsValues)[2]) {
+ 			namesForPriorMatrix <-append(namesForPriorMatrix, paste("ExtrinsicValue", c, sep=""))
+ 		}
+ 		PriorMatrix<-rbind(PriorMatrix, cbind(startingPriorsValues, intrinsicPriorsValues, extrinsicPriorsValues))
+ 		colnames(PriorMatrix)<-namesForPriorMatrix
+ 		rownames(PriorMatrix)<-c("shape", "value1", "value2")
+ 		
+ 		#Calculate freevector
+ 		for (i in 1:dim(startingPriorsValues)[2]) {
+ 			priorFn<-match.arg(arg=startingPriorsFns[i],choices=c("fixed", "uniform", "normal", "lognormal", "gamma", "exponential"),several.ok=FALSE)
+ 			if (priorFn=="fixed") {
+ 				numberParametersFree<-numberParametersFree-1
+ 				freevector<-c(freevector, FALSE)
+ 			}
+ 			else {
+ 				numberParametersStarting<-numberParametersStarting+1
+ 				freevariables<-cbind(freevariables, startingPriorsValues[, i])
+ 				titlevector <-c(titlevector, paste("Starting", numberParametersStarting))
+ 				freevector<-c(freevector, TRUE)
+ 			}
+ 		}
+ 		for (i in 1:dim(intrinsicPriorsValues)[2]) {
+ 			priorFn<-match.arg(arg=intrinsicPriorsFns[i],choices=c("fixed", "uniform", "normal", "lognormal", "gamma", "exponential"),several.ok=FALSE)
+ 			if (priorFn=="fixed") {
+ 				numberParametersFree<-numberParametersFree-1
+ 				freevector<-c(freevector, FALSE)
+ 			}
+ 			else {
+ 				numberParametersIntrinsic<-numberParametersIntrinsic+1
+ 				freevariables<-cbind(freevariables, intrinsicPriorsValues[, i])
+ 				titlevector <-c(titlevector, paste("Intrinsic", numberParametersIntrinsic))
+ 				freevector<-c(freevector, TRUE)
+ 			}
+ 		}
+ 		for (i in 1:dim(extrinsicPriorsValues)[2]) {
+ 			priorFn<-match.arg(arg=extrinsicPriorsFns[i],choices=c("fixed", "uniform", "normal", "lognormal", "gamma", "exponential"),several.ok=FALSE)
+ 			if (priorFn=="fixed") {
+ 				numberParametersFree<-numberParametersFree-1
+ 				freevector<-c(freevector, FALSE)
+ 			}
+ 			else {
+ 				numberParametersExtrinsic<-numberParametersExtrinsic+1
+ 				freevariables<-cbind(freevariables, extrinsicPriorsValues[, i])
+ 				titlevector <-c(titlevector, paste("Extrinsic", numberParametersExtrinsic))
+ 				freevector<-c(freevector, TRUE)
+ 			}
+ 		}
+ 		
+ 		#initialize guesses, if needed
+ 			startingValuesGuess<-rep(NA,length(startingPriorsFns))
+ 			for (i in 1:length(startingPriorsFns)) {
+ 				startingValuesGuess[i]<-pullFromPrior(startingPriorsValues[,i],startingPriorsFns[i])
+ 			}
+ 			intrinsicValuesGuess<-rep(NA,length(intrinsicPriorsFns))
+ 			for (i in 1:length(intrinsicPriorsFns)) {
+ 				intrinsicValuesGuess[i]<-pullFromPrior(intrinsicPriorsValues[,i],intrinsicPriorsFns[i])
+ 			}
+ 			extrinsicValuesGuess<-rep(NA,length(extrinsicPriorsFns))
+ 			for (i in 1:length(extrinsicPriorsFns)) {
+ 				extrinsicValuesGuess[i]<-pullFromPrior(extrinsicPriorsValues[,i],extrinsicPriorsFns[i])
+ 			}
+ 		
+ 		
+ 			StartSims<-1000*numberParametersFree
+ 		
+ 		
+ 		#Figure out how many iterations to use for optimization in Geiger.
+ 		brown<-fitContinuous(phy=phy, dat=traits, model="BM", ncores=1, control=list(niter=100)) #it actually runs faster without checking for cores. And we parallelize elsewhere
+ 		lambda<-fitContinuous(phy=phy, dat=traits, model="lambda", ncores=1, control=list(niter=100))
+ 		delta<-fitContinuous(phy=phy, dat=traits, model="delta", ncores=1, control=list(niter=100))
+ 		ou<-fitContinuous(phy=phy, dat=traits, model="OU", ncores=1, control=list(niter=100))
+ 		white<-fitContinuous(phy=phy, dat=traits, model="white", ncores=1, control=list(niter=100))
+ 		trueStarting<-rep(NaN, dim(startingPriorsValues)[2])
+ 		trueIntrinsic<-rep(NaN, dim(intrinsicPriorsValues)[2])
+ 		trueExtrinsic<-rep(NaN, dim(extrinsicPriorsValues)[2])
+ 		for (j in 1:dim(startingPriorsValues)[2]) {
+ 			trueStarting[j]=pullFromPrior(startingPriorsValues[,j],startingPriorsFns[j])
+ 		}
+ 		for (j in 1:dim(intrinsicPriorsValues)[2]) {
+ 			trueIntrinsic[j]=pullFromPrior(intrinsicPriorsValues[,j],intrinsicPriorsFns[j])
+ 		}
+ 		for (j in 1:dim(extrinsicPriorsValues)[2]) {
+ 			trueExtrinsic[j]=pullFromPrior(extrinsicPriorsValues[,j],extrinsicPriorsFns[j])
+ 		}
+ 		trueInitial<-c(trueStarting, trueIntrinsic, trueExtrinsic)
+ 		trueFreeValues<-trueInitial[freevector]
+ 			simTraits<-doSimulationWithPossibleExtinction(taxon.df=taxon.df, intrinsicFn=intrinsicFn, extrinsicFn=extrinsicFn, startingValues=trueStarting, intrinsicValues=trueIntrinsic, extrinsicValues=trueExtrinsic, timeStep=timeStep, verbose=TRUE)
+ 
+ }
> 
> results <- doRun_prc(
+   phy = phy,
+   traits = trait,
+   intrinsicFn=intrinsicFn,
+   extrinsicFn=extrinsicFn,
+   startingPriorsFns=startingPriorsFns,
+   startingPriorsValues=startingPriorsValues,
+   intrinsicPriorsFns=intrinsicPriorsFns,
+   intrinsicPriorsValues=intrinsicPriorsValues,
+   extrinsicPriorsFns=extrinsicPriorsFns,
+   extrinsicPriorsValues=extrinsicPriorsValues,
+   TreeYears=TreeYears,
+   standardDevFactor=0.2,
+   plot=FALSE,
+   StartSims=20,
+   epsilonProportion=0.1,
+   epsilonMultiplier=0.7,
+   nStepsPRC=5,
+   numParticles=5,
+   jobName='OrganEtAl',
+   stopRule=FALSE,
+   multicore=TRUE,
+   coreLimit=3
+ )
Warning in fitContinuous(phy = phy, dat = traits, model = "OU", ncores = 1,  :
  Non-ultrametric tree with OU model, using VCV method.
Setting number of starting points for Geiger optimization to
 10 for Brownian motion
 31 for lambda
 26 for delta
 36 for OU
 10 for white noise
Number of initial simulations set to 20 
Doing simulations:Warning in fitContinuous(phy = phy, dat = traits, model = "OU", ncores = 1,  :
  Non-ultrametric tree with OU model, using VCV method.
Using 3 core(s) for simulations 

Warning in parallelSimulation(nrepSim, coreLimit, taxon.df, phy, startingPriorsValues,  :
  The simulation is most efficient if the number of nrepSim is a multiple of the number of cores
Doing simulations: ...